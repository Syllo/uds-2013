/*****************************************************************************
*                                                                            *
*                       Multifor-compiler                                    * 
*                                                                            * 
*                                                                            *
*   Auteurs : Pr. Philippe CLAUSS & Imen FASSI                               *
*   Première version : Octobre 2012                                          *
*   Deuxième version : avril 2013                                            *
*   Troisième version : mai 2013                                             *
*   Description :                                                            * 
*   Ce code permet de vérifier la syntaxe d'un "multifor"                    *
*   et de le traduire en des "for" classiques                                *
*   en utilisant l'outil Polyédrique Cloog                                   *
*                                                                            *
*****************************************************************************/


%{
int nbesp=0;
int i;
int create_Max_Min=0;
%}
commentaire1  "/*""/"*([^*/]|"*"[^/]|[^*]"/")*"*"*"*/"
commentaire2 "//".*"\n"
chaine \"([^\"])*\"
car1 "'{'"
car2 "'}'"
sep ("\n"|"\t"|" ")*
Var [a-zA-Z]([a-zA-Z]|[0-9])*|[0-9]+
param ({Var}{sep}(("*"|{sep})*{Var}{sep})?(","{sep}{Var}("*"|{sep})*{Var}{sep})*)?
main {Var}{sep}"main"{sep}"("{sep}{param}{sep}")"
%%
{main}         {  if(create_Max_Min)
                  {
                  fprintf(ooout,"int min (int A, int B) {\n if (A<B) return A;\n else return B;\n}\n");
                  fprintf(ooout,"int max (int A, int B) {\n if (A>B) return A;\n else return B;\n}\n");
                  }
                  ECHO;
               }

{commentaire1} {ECHO;}
{commentaire2} {ECHO;}
{chaine} {ECHO;}
{car1} {ECHO;}
{car2} {ECHO;}
^" "*\n? 
"{"  {nbesp+=2; ECHO; }
^" "*"}"  {nbesp-=2; for(i=0;i<nbesp;i++)fprintf(ooout," "); fprintf(ooout,"}"); }
^" "*.  {for(i=0;i<nbesp;i++)fprintf(ooout," "); fprintf(ooout,"%c",ootext[strlen(ootext)-1]); }
%%

int oowrap ( ) {
   return 1;
}


void mise_en_forme(char * output) {
   ooin = fopen("_multifor_Compiler_IBB_OutPut.c","r");
   ooout = fopen(output,"w");
   fputs("/*-  Generated by Multifor-compiler  - */\n",ooout);
   oolex();
   fclose(ooin); 
   fclose(ooout);
   remove("_multifor_Compiler_IBB_OutPut.c");
   remove("_multifor_Compiler_IBB_InPut.c");
//   remove("lex.yy.o");
//   remove("lex.yyy.o");
//   remove("multiforParser.o");
//   remove("lex.oo.o");
//   remove("y.tab.o");
//   remove("_multifor_Compiler_IBB_tempMul.c");
//   remove("lex.yyy.c");
//   remove("y.tab.c");
//   remove("lex.oo.c");
//   remove("_multifor_Compiler_IBB_temp2.c");
//   remove("lex.yy.c");
//   remove("_multifor_Compiler_IBB_temp.c");
}
